@using marketimnet.Core.ViewModels
@model OrderViewModel
@{
    ViewData["Title"] = "Sipariş Tamamla";
}

<div class="container mt-4">
    <h2>Sipariş Onayı</h2>
    <div class="row">
        <div class="col-md-8">
            <form asp-action="Checkout" method="post" id="checkoutForm">
                @Html.AntiForgeryToken()
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Teslimat Bilgileri</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="PhoneNumber" class="form-label"></label>
                            <input asp-for="PhoneNumber" class="form-control" placeholder="5XX XXX XXXX" required />
                            <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Email" class="form-label"></label>
                            <input asp-for="Email" class="form-control" placeholder="ornek@email.com" required />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="ShippingAddress" class="form-label"></label>
                            <textarea asp-for="ShippingAddress" class="form-control" rows="3" required></textarea>
                            <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label"></label>
                            <textarea asp-for="Notes" class="form-control" rows="2"></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Ödeme Bilgileri</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="CardHolderName" class="form-label"></label>
                            <input asp-for="CardHolderName" class="form-control" required />
                            <span asp-validation-for="CardHolderName" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="CardNumber" class="form-label"></label>
                            <input asp-for="CardNumber" class="form-control" id="cardNumber" maxlength="16" inputmode="numeric" pattern="\d{16}" oninput="this.value=this.value.replace(/[^\d]/g,'').substring(0,16);" required />
                            <span asp-validation-for="CardNumber" class="text-danger"></span>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="ExpiryDate" class="form-label"></label>
                                <input asp-for="ExpiryDate" class="form-control" placeholder="AA/YY" required />
                                <span asp-validation-for="ExpiryDate" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="Cvc" class="form-label"></label>
                                <input asp-for="Cvc" class="form-control" maxlength="3" required />
                                <span asp-validation-for="Cvc" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary btn-lg w-100">Siparişi Onayla</button>
            </form>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Sipariş Özeti</h5>
                </div>
                <div class="card-body">
                    @foreach (var item in Model.CartItems)
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <div>
                                <h6 class="mb-0">@item.ProductName</h6>
                                <small class="text-muted">@item.Quantity adet x @item.Price.ToString("C2")</small>
                            </div>
                            <div>
                                <strong>@((item.Quantity * item.Price).ToString("C2"))</strong>
                            </div>
                        </div>
                    }
                    <hr />
                    <div class="d-flex justify-content-between">
                        <h5>Toplam:</h5>
                        <h5>@Model.TotalAmount.ToString("C2")</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Telefon numarası formatlaması
        document.querySelector('[name="PhoneNumber"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '').substring(0, 10);
            e.target.value = value;
        });

        // Kart numarası kontrolü ve formatlaması
        document.getElementById('cardNumber').addEventListener('input', function (e) {
            let value = e.target.value.replace(/\D/g, '').substring(0, 16);
            e.target.value = value;
        });

        // Yapıştırma işlemi için özel kontrol
        document.getElementById('cardNumber').addEventListener('paste', function (e) {
            e.preventDefault();
            const pastedData = (e.originalEvent || e).clipboardData.getData('text');
            this.value = pastedData.replace(/\D/g, '').substring(0, 16);
        });

        // Klavye girişi kontrolü
        document.getElementById('cardNumber').addEventListener('keypress', function (e) {
            // Sadece rakam girişine izin ver
            if (!/^\d$/.test(e.key) && !e.key.match(/Backspace|Delete|ArrowLeft|ArrowRight|Tab/)) {
                e.preventDefault();
                return false;
            }

            // 16 haneden fazla girişi engelle
            if (this.value.replace(/\D/g, '').length >= 16) {
                e.preventDefault();
                return false;
            }
        });

        // Son kullanma tarihi formatlaması
        document.querySelector('[name="ExpiryDate"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 2) {
                value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
            e.target.value = value;
        });

        // Form submit işlemi
        $('#checkoutForm').on('submit', function(e) {
            e.preventDefault();
            
            if (!$(this).valid()) {
                var validationErrors = [];
                $('.field-validation-error').each(function() {
                    validationErrors.push($(this).text());
                });
                
                Swal.fire({
                    title: 'Hata!',
                    text: 'Lütfen tüm zorunlu alanları doldurun.',
                    html: validationErrors.join('<br>'),
                    icon: 'error',
                    confirmButtonText: 'Tamam'
                });
                return false;
            }
            
            const submitButton = $(this).find('button[type="submit"]');
            submitButton.prop('disabled', true);
            
            const formData = $(this).serializeArray();
            
            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: formData,
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: response.message || 'Siparişiniz başarıyla alındı.',
                            icon: 'success',
                            confirmButtonText: 'Tamam'
                        }).then(() => {
                            $('#cartCount').text('0');
                            window.location.href = '/';
                        });
                    } else {
                        if (response.redirectUrl) {
                            Swal.fire({
                                title: 'Kayıt Gerekli',
                                text: response.message,
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Kayıt Ol',
                                cancelButtonText: 'İptal'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = response.redirectUrl;
                                }
                            });
                        } else {
                            Swal.fire({
                                title: 'Hata!',
                                text: response.message || 'Lütfen tüm alanları doldurun.',
                                icon: 'error',
                                confirmButtonText: 'Tamam'
                            });
                        }
                        submitButton.prop('disabled', false);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Form submit error:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Sipariş işlemi sırasında bir hata oluştu.',
                        icon: 'error',
                        confirmButtonText: 'Tamam'
                    });
                    submitButton.prop('disabled', false);
                }
            });
        });
    </script>
} 