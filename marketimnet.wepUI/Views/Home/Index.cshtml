@model IEnumerable<marketimnet.Core.Entities.Product>
@{
    ViewData["Title"] = "Anasayfa";
}

@Html.AntiForgeryToken()

<main>
    <!-- Banner Area -->
    <section class="row mb-4">
        <div class="col-12">
            <div id="homeCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#homeCarousel" data-bs-slide-to="0" class="active"></button>
                    <button type="button" data-bs-target="#homeCarousel" data-bs-slide-to="1"></button>
                </div>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="~/img/banner1.jpg" class="d-block w-100" style="max-height: 400px; object-fit: cover;" alt="Banner 1" onerror="this.src='https://via.placeholder.com/1200x400?text=Marketimnet+Banner'">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Marketimnet'e Hoş Geldiniz</h5>
                            <p>Güvenli alışverişin adresi</p>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="~/img/banner2.jpg" class="d-block w-100" style="max-height: 400px; object-fit: cover;" alt="Banner 2" onerror="this.src='https://via.placeholder.com/1200x400?text=Kampanyalar'">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Kampanyaları Kaçırmayın</h5>
                            <p>En yeni ürünler en uygun fiyatlarla</p>
                        </div>
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#homeCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Önceki</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#homeCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Sonraki</span>
                </button>
            </div>
        </div>
    </section>

    <!-- Products Header -->
    <section class="row my-4">
        <div class="col-12">
            <h2 class="text-center">Ürünlerimiz</h2>
            <p class="text-center text-muted">Marketimnet kalitesiyle sizlerle</p>
        </div>
    </section>

    <!-- Products -->
    <section class="products-section mb-5 pb-5">
        @if (Model != null && Model.Any())
        {
            <div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-4">
                @foreach (var product in Model)
                {
                    <div class="col">
                        <article class="card h-100 product-card">
                            <div class="card-img-container">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name">
                                }
                                else
                                {
                                    <img src="https://via.placeholder.com/300x300?text=Ürün+Resmi" class="card-img-top" alt="@product.Name">
                                }
                            </div>
                            <div class="card-body d-flex flex-column">
                                <div class="flex-grow-1">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-category text-muted mb-2">@(product.Category?.Name ?? "Genel")</p>
                                    <p class="card-text product-description">
                                        @(string.IsNullOrEmpty(product.Description)
                                            ? "Ürün açıklaması bulunmamaktadır."
                                            : (product.Description.Length > 100
                                                ? product.Description.Substring(0, 97) + "..."
                                                : product.Description))
                                    </p>
                                </div>
                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="product-price h4 mb-0">@product.Price.ToString("c")</span>
                                    </div>
                                    <button class="btn btn-primary w-100 add-to-cart" data-product-id="@product.Id">
                                        <i class="fas fa-shopping-cart me-2"></i>Sepete Ekle
                                    </button>
                                </div>
                            </div>
                        </article>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle me-2"></i> Henüz ürün eklenmemiş.
            </div>
        }
    </section>
</main>

<hr class="footer-divider my-6">

<style>
    .footer-divider {
        border: 0;
        height: 1px;
        background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0));
        margin-left: auto;
        margin-right: auto;
        width: 80%;
        margin-top: 5rem;
        margin-bottom: 5rem;
    }

    .product-card {
        transition: transform 0.3s, box-shadow 0.3s;
        border: none;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .card-img-container {
        height: 200px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
    }

    .card-img-top {
        object-fit: cover;
        height: 100%;
        width: 100%;
        transition: transform 0.3s ease;
    }

    .product-card:hover .card-img-top {
        transform: scale(1.05);
    }

    .product-description {
        font-size: 0.875rem;
        color: #6c757d;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        height: 4.5rem;
    }

    .product-price {
        color: #0d6efd;
        font-weight: 600;
    }

    .card-category {
        font-size: 0.8rem;
    }

    .add-to-cart {
        transition: all 0.3s ease;
    }

    .add-to-cart:hover {
        transform: translateY(-2px);
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Get the antiforgery token
            var token = $('input[name="__RequestVerificationToken"]').val();

            $('.add-to-cart').click(function (e) {
                e.preventDefault();
                var button = $(this);
                var productId = button.data('product-id');
                
                // Disable the button
                button.prop('disabled', true);
                
                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': token
                    },
                    data: JSON.stringify({ 
                        productId: productId,
                        quantity: 1
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        if (response.success) {
                            // Update cart count in navbar
                            $('#cartCount').text(response.cartCount);
                            
                            // Show success message
                            Swal.fire({
                                title: 'Başarılı!',
                                text: response.message,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            Swal.fire({
                                title: 'Hata!',
                                text: response.message || 'Ürün sepete eklenirken bir hata oluştu.',
                                icon: 'error',
                                confirmButtonText: 'Tamam'
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Hata:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        
                        Swal.fire({
                            title: 'Hata!',
                            text: 'Ürün sepete eklenirken bir hata oluştu.',
                            icon: 'error',
                            confirmButtonText: 'Tamam'
                        });
                    },
                    complete: function () {
                        // Re-enable the button
                        button.prop('disabled', false);
                    }
                });
            });
        });
    </script>
}
